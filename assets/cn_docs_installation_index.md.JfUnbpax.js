import{_ as a,c as s,o as l,af as n}from"./chunks/framework.BMktmvug.js";const c=JSON.parse('{"title":"安装指南","description":"","frontmatter":{},"headers":[],"relativePath":"cn/docs/installation/index.md","filePath":"cn/docs/installation/index.md"}'),e={name:"cn/docs/installation/index.md"};function t(h,i,p,r,o,d){return l(),s("div",null,i[0]||(i[0]=[n(`<h1 id="安装指南" tabindex="-1">安装指南 <a class="header-anchor" href="#安装指南" aria-label="Permalink to &quot;安装指南&quot;">​</a></h1><p>Chaterm 提供多种安装选项，以适应不同的开发环境和用户偏好。本指南概述了在您的系统上设置 Chaterm 的所有可用方法，无论您是参与项目的开发者还是希望使用该应用程序的最终用户。</p><h2 id="配置要求" tabindex="-1">配置要求 <a class="header-anchor" href="#配置要求" aria-label="Permalink to &quot;配置要求&quot;">​</a></h2><p>在安装 Chaterm 之前，请确保您的系统满足以下要求：</p><h3 id="操作系统" tabindex="-1">操作系统： <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统：&quot;">​</a></h3><ul><li>Windows 10/11</li><li>macOS 10.15（Catalina）或更高版本（支持 Intel 和 Apple Silicon）</li><li>Linux（基于 Debian/Ubuntu 的发行版和其他支持 AppImage 的发行版）</li></ul><h3 id="硬件" tabindex="-1">硬件： <a class="header-anchor" href="#硬件" aria-label="Permalink to &quot;硬件：&quot;">​</a></h3><ul><li>最低 4GB RAM（推荐 8GB）</li><li>1GB 可用存储空间</li></ul><h3 id="开发要求-仅针对开发者" tabindex="-1">开发要求（仅针对开发者）： <a class="header-anchor" href="#开发要求-仅针对开发者" aria-label="Permalink to &quot;开发要求（仅针对开发者）：&quot;">​</a></h3><ul><li>Node.js 16.x 或更高版本</li><li>npm 7.x 或更高版本</li></ul><h2 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h2><p>Chaterm 根据您的操作系统以不同格式分发。请选择以下适当的方法。</p><h3 id="windows-安装" tabindex="-1">Windows 安装 <a class="header-anchor" href="#windows-安装" aria-label="Permalink to &quot;Windows 安装&quot;">​</a></h3><p>Windows 用户可以使用 NSIS 安装包安装 Chaterm：</p><ol><li>从官方发布页面下载最新的 <strong>Chaterm-[版本]-setup.exe</strong></li><li>运行安装程序并按照屏幕上的指示操作</li><li>Chaterm 默认会创建桌面快捷方式，以便轻松访问 来源：electron-builder.yml#L37-L41</li></ol><h3 id="macos-安装" tabindex="-1">macOS 安装 <a class="header-anchor" href="#macos-安装" aria-label="Permalink to &quot;macOS 安装&quot;">​</a></h3><p>macOS 用户有两种安装选项：</p><ol><li><strong>DMG 安装</strong>（推荐）：</li></ol><ul><li>为您的架构下载适当的 <strong>chaterm-[版本]-[架构].dmg</strong> 文件（Intel Macs 使用 x64，Apple Silicon 使用 arm64）</li><li>打开 DMG 文件</li><li>将 Chaterm 应用程序拖到您的应用程序文件夹中</li></ul><ol start="2"><li><strong>ZIP安装</strong>：</li></ol><ul><li>为您的架构下载 chaterm-[版本]-[架构].zip 文件</li><li>解压 ZIP 文件</li><li>将解压后的 Chaterm 应用程序移动到您的应用程序文件夹中</li></ul><h3 id="linux-安装" tabindex="-1">Linux 安装 <a class="header-anchor" href="#linux-安装" aria-label="Permalink to &quot;Linux 安装&quot;">​</a></h3><p>Linux 用户有两种安装选项：</p><ol><li><strong>AppImage</strong>（通用）：</li></ol><ul><li>下载 <strong>chaterm-[版本]-[架构].AppImage</strong> 文件</li><li>使用以下命令使其可执行： <strong>chmod +x chaterm-[版本]-[架构].AppImage</strong></li><li>直接运行：./chaterm-[版本]-[架构].AppImage</li></ul><ol start="2"><li><strong>Debian/Ubuntu 包</strong>：</li></ol><ul><li>下载 <strong>chaterm-[版本]-[架构].deb</strong> 文件</li><li>使用以下命令安装： <strong>sudo dpkg -i chaterm-[版本]-[架构].deb</strong> 或通过您的包管理器安装</li></ul><h2 id="源码安装" tabindex="-1">源码安装 <a class="header-anchor" href="#源码安装" aria-label="Permalink to &quot;源码安装&quot;">​</a></h2><h3 id="设置环境" tabindex="-1">设置环境 <a class="header-anchor" href="#设置环境" aria-label="Permalink to &quot;设置环境&quot;">​</a></h3><h4 id="_1-克隆仓库" tabindex="-1">1. 克隆仓库： <a class="header-anchor" href="#_1-克隆仓库" aria-label="Permalink to &quot;1. 克隆仓库：&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/chaterm/Chaterm.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Chaterm</span></span></code></pre></div><h4 id="_2-配置-npm" tabindex="-1">2. 配置 npm ： <a class="header-anchor" href="#_2-配置-npm" aria-label="Permalink to &quot;2. 配置 npm ：&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 更新 npm 注册表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 编辑 npm 配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在文件末尾添加以下行：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron_mirror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://cdn.npmmirror.com/binaries/electron/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">electron_builder_binaries_mirror</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://npmmirror.com/mirrors/electron-builder-binaries/</span></span></code></pre></div><h4 id="_3-安装依赖" tabindex="-1">3. 安装依赖： <a class="header-anchor" href="#_3-安装依赖" aria-label="Permalink to &quot;3. 安装依赖：&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/patch-package-lock.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="源码构建" tabindex="-1">源码构建 <a class="header-anchor" href="#源码构建" aria-label="Permalink to &quot;源码构建&quot;">​</a></h3><p>您可以为任何受支持的平台从源代码构建 Chaterm：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于Windows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:win</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:mac</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于Linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:linux</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 未打包构建（用于测试）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:unpack</span></span></code></pre></div><h2 id="自定义构建" tabindex="-1">自定义构建 <a class="header-anchor" href="#自定义构建" aria-label="Permalink to &quot;自定义构建&quot;">​</a></h2><p>高级开发者可以通过修改 <strong>electron-builder.yml</strong> 文件来自定义构建过程。此配置控制：</p><ul><li>文件包含/排除规则</li><li>应用程序元数据</li><li>平台特定设置</li><li>打包格式</li><li>资源处理</li></ul><p>例如，您可以自定义：</p><ul><li>通过替换 resources/icon.ico 和 resources/icon.icns 来更改图标文件</li><li>应用程序名称和标识符</li><li>文件压缩设置</li><li>每个平台的目标架构</li></ul>`,43)]))}const g=a(e,[["render",t]]);export{c as __pageData,g as default};
