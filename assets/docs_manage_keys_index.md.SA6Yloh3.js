import{_ as t,c as a,o as i,af as o}from"./chunks/framework.BMktmvug.js";const y=JSON.parse('{"title":"Key Management","description":"","frontmatter":{},"headers":[],"relativePath":"docs/manage/keys/index.md","filePath":"docs/manage/keys/index.md"}'),n={name:"docs/manage/keys/index.md"};function r(l,e,d,s,h,u){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="key-management" tabindex="-1">Key Management <a class="header-anchor" href="#key-management" aria-label="Permalink to &quot;Key Management&quot;">​</a></h1><p>The key management feature helps you securely store and manage SSH keys, supporting multiple key types and secure storage methods.</p><h2 id="feature-overview" tabindex="-1">Feature Overview <a class="header-anchor" href="#feature-overview" aria-label="Permalink to &quot;Feature Overview&quot;">​</a></h2><p>The key management module provides the following core features:</p><ul><li><strong>Add Keys</strong> - Supports multiple ways to import keys</li><li><strong>Edit Keys</strong> - Modify key information and configuration</li><li><strong>Delete Keys</strong> - Securely remove unnecessary keys</li></ul><h2 id="adding-keys" tabindex="-1">Adding Keys <a class="header-anchor" href="#adding-keys" aria-label="Permalink to &quot;Adding Keys&quot;">​</a></h2><h3 id="method-1-file-import" tabindex="-1">Method 1: File Import <a class="header-anchor" href="#method-1-file-import" aria-label="Permalink to &quot;Method 1: File Import&quot;">​</a></h3><ol><li><p><strong>Drag and Drop Import</strong></p><ul><li>Drag private key files directly to the specified area</li><li>System automatically recognizes key format and type</li></ul></li><li><p><strong>File Selection</strong></p><ul><li>Click &quot;Select File&quot; button</li><li>Browse and select private key file</li><li>Supports <code>.pem</code>, <code>.key</code>, <code>.rsa</code> and other formats</li></ul></li></ol><h3 id="method-2-manual-input" tabindex="-1">Method 2: Manual Input <a class="header-anchor" href="#method-2-manual-input" aria-label="Permalink to &quot;Method 2: Manual Input&quot;">​</a></h3><p>When manually adding keys, you need to fill in the following information:</p><table tabindex="0"><thead><tr><th>Field</th><th>Description</th><th>Required</th></tr></thead><tbody><tr><td><strong>Key Name</strong></td><td>Friendly name to identify the key</td><td>✅</td></tr><tr><td><strong>Private Key Content</strong></td><td>Complete private key text content</td><td>✅</td></tr><tr><td><strong>Public Key Content</strong></td><td>Corresponding public key content (optional)</td><td>❌</td></tr><tr><td><strong>Private Key Password</strong></td><td>Private key passphrase (if any)</td><td>❌</td></tr></tbody></table><h2 id="key-management-operations" tabindex="-1">Key Management Operations <a class="header-anchor" href="#key-management-operations" aria-label="Permalink to &quot;Key Management Operations&quot;">​</a></h2><h3 id="edit-keys" tabindex="-1">Edit Keys <a class="header-anchor" href="#edit-keys" aria-label="Permalink to &quot;Edit Keys&quot;">​</a></h3><ul><li>Click the &quot;Edit&quot; button in the key list</li><li>Modify key name or update key content</li><li>Changes take effect immediately after saving</li></ul><h3 id="delete-keys" tabindex="-1">Delete Keys <a class="header-anchor" href="#delete-keys" aria-label="Permalink to &quot;Delete Keys&quot;">​</a></h3><ul><li>Select the key to delete</li><li>Confirm the delete operation</li><li>Key will be permanently removed</li></ul><div class="warning custom-block"><p class="custom-block-title">Important Notes</p><p>Before deleting keys, please ensure:</p><ul><li>The key is not being used by other services</li><li>Important key information has been backed up</li><li>Understand the irreversible nature of delete operations</li></ul></div>',17)]))}const p=t(n,[["render",r]]);export{y as __pageData,p as default};
